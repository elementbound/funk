/*
           _________
	      /--------/                    
	     /  ______/                    _    _
 	    /  /_____                     / / / /
	   /  +:::::/  _   _    ____     / /_/ /
	  /  /        / / / /  / _  \   / __ <
	 /  /        / /_/ /  / / / /  / / / / 
	/__/         \____/  /_/ /_/  /_/ /_/
	=========================================
	Because it's not Groovy enough
*/

/* Getters and setters in Funk */

/* 
Let's say you declare a custom type, and you want to give it a getter which then gives you 
a value derived from the type's fields. So you go ahead and write something like this: 
*/

aggregate Dollars {
	amount
}

function Dollars.asForints() 
	return self.amount * 288; 
	
/* And then you access it: */ 

IWishThisWasMyMonthlySalary = !.Dollars(); 
IWishThisWasMyMonthlySalary.amount = 4500; 

aLot = IWishThisWasMyMonthlySalary.asForints();

/* No. Don't do this. Please. There is a better way: */

function Dollars.forints() 
	return self.amount * 288; 
	
function Dollars.forints(val)
	self.amount = val / 288; 
	
IWishThisWasMyMonthlySalary = !.Dollars(); 
IWishThisWasMyMonthlySalary.amount = 4500;

/*
In Funk, any function without an argument can be used as a getter. 
Any function with a single argument can be used as a setter: 
*/

IWishThisWasMyMonthlySalary.forints.println(); 
IWishThisWasMyMonthlySalary.forints = 960*1000;
IWishThisWasMyMonthlySalary.amount.println(); 

/* Do note that you can't override existing fields with getters and setters: */

function Dollars.amount() 
	return 2; 
	
IWishThisWasMyMonthlySalary.amount.println(); /* NOT 2 */

return 1;
/* Funk's setters and getters allow for some pretty fun things, syntax-wise: */
/* ( Since these things are not implemented yet, execution stops here ) */ 

aggregate Array {
	/* ... */
}

function Array.clear() {
	/* ... */
}

function Array.fill(val) {
	/* ... */
}

a = !.Array();
a.clear; /* Clear array */
a.fill = 8; /* Fill it with 8's */

/* Chain this with implicit self-return: */
a = 