/*
           _________
	      /--------/                    
	     /  ______/                    _    _
 	    /  /_____                     / / / /
	   /  +:::::/  _   _    ____     / /_/ /
	  /  /        / / / /  / _  \   / __ <
	 /  /        / /_/ /  / / / /  / / / / 
	/__/         \____/  /_/ /_/  /_/ /_/
	=========================================
	Because it's not Groovy enough
*/

/* Inheritance in Funk */

/* If you haven't already, please read aggregates.funk and functions.funk. */
/* This example is based on them. */

/* So you already have some of your types, but common functionality occurs and you really don't
want to repeat yourself because you are a proper programmer. 
In other languages, you usually turn to the wonder of inheritance and polymorphism. 

You are in luck, fam! */

aggregate Date { 
	year,
	month, 
	day 
}

function Date.nextYear() {
	self.year = self.year + 1;
}

function Date.nextMonth() {
	self.month = self.month + 1;
	if(self.month > 12) {
		self.month = 1;
		self.nextYear(); 
	}
}

function Date.print() {
	(("" + self.day) + "." + self.month + "." + self.year).print();
}

function Date.println() {
	self.print();
	"".println();
}

/* We got a really basic Date class fleshed out. We'd like to add a time to this class, so we 
derive a new one: */

aggregate DateTime : Date { 
	hour, 
	minute, 
	second 
}

/* The parent aggregate's fields are appended to child's. */
/* If you redefine a field, it won't be added again. */

function DateTime.print() {
	(("" + self.day) + "." + self.month + "." + self.year + " " + 
		self.hour + ":" + self.minute + ":" + self.second).print();
}

whenever = !.DateTime(); 

whenever.year = !.Random().number(2000, 3000).round();
whenever.month = 6;
whenever.day = 4;

whenever.hour = 8;
whenever.minute = 47;
whenever.second = 11; 

/* And voi'la, you can use Date functions on DateTimes: */

whenever.nextYear();
whenever.println(); 